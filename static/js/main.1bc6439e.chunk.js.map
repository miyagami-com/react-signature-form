{"version":3,"sources":["../../src/index.tsx","App.tsx","index.tsx"],"names":["SignatureForm","props","canvasRef","useRef","useState","isPainting","setIsPainting","x","y","mousePosition","setMousePosition","empty","setEmpty","defaultProps","lineWidth","lineJoin","strokeStyle","marginBottom","backgroundColor","borderRadius","border","color","cursor","height","padding","fontSize","margin","signature","setSignature","width","canvasStyle","markerStyle","saveButtonStyle","clearButtonStyle","redrawButtonStyle","saveButtonText","clearButtonText","redrawButtonText","useEffect","canvas","context","img","getCoordinates","event","rect","scaleX","scaleY","startPaint","useCallback","coordinates","paint","newMousePosition","originalMousePosition","drawLine","exitPaint","style","ref","onClick","clearCanvas","saveCanvas","App","className","href","target","rel","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1bc6439e.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react'\n\ninterface signatureFormProps {\n  signature: string\n  setSignature: React.Dispatch<React.SetStateAction<string>>\n  width?: number\n  height?: number\n  canvasStyle?: React.CSSProperties\n  markerStyle?: {\n    strokeStyle?: string\n    lineJoin?: CanvasLineJoin\n    lineWidth?: number\n  }\n  saveButtonStyle?: React.CSSProperties\n  clearButtonStyle?: React.CSSProperties\n  redrawButtonStyle?: React.CSSProperties\n  saveButtonText?: string\n  clearButtonText?: string\n  redrawButtonText?: string\n}\n\ninterface Coordinate {\n  x: number\n  y: number\n}\n\n// Form with a HTML canvas to draw signatures. It is based on this:\nexport const SignatureForm = (props: signatureFormProps) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const [isPainting, setIsPainting] = useState<Boolean>(false)\n  const [mousePosition, setMousePosition] = useState<Coordinate>({ x: 0, y: 0 })\n  const [empty, setEmpty] = useState<Boolean>(true)\n\n  const defaultProps = {\n    width: 400,\n    height: 200,\n    markerStyle: {\n      lineWidth: 4,\n      lineJoin: 'round' as CanvasLineJoin,\n      strokeStyle: '#000'\n    },\n    canvasStyle: {\n      marginBottom: 14,\n      backgroundColor: '#fff',\n      borderRadius: 4,\n      border: '1px solid #f0f0f0',\n      // boxShadow: ' 0 5px 10px 0 rgba(0,0,0,0.2)'\n    },\n    saveButtonStyle: {\n      backgroundColor: '#1890ff',\n      color: 'white',\n      cursor: 'pointer',\n      borderRadius: '4px',\n      height: 32,\n      padding: '4px 15px',\n      fontSize: 14,\n      border: 'none',\n      margin: '4px'\n    },\n    clearButtonStyle: {\n      color: 'rgba(0,0,0,.85)',\n      cursor: 'pointer',\n      borderRadius: '4px',\n      height: 32,\n      padding: '4px 15px',\n      fontSize: 14,\n      border: '1px solid #f0f0f0',\n      margin: '4px'\n    },\n    redrawButtonStyle: {\n      color: 'rgba(0,0,0,.85)',\n      cursor: 'pointer',\n      borderRadius: '4px',\n      height: 32,\n      padding: '4px 15px',\n      fontSize: 14,\n      border: '1px solid #f0f0f0',\n      margin: '4px'\n    },\n    saveButtonText: 'Save',\n    clearButtonText: 'Clear',\n    redrawButtonText: 'Redraw'\n  }\n\n  const {\n    signature,\n    setSignature,\n    width,\n    height,\n    canvasStyle,\n    markerStyle,\n    saveButtonStyle,\n    clearButtonStyle,\n    redrawButtonStyle,\n    saveButtonText,\n    clearButtonText,\n    redrawButtonText\n  } = props\n\n  // Set canvas to image of signature if signature exists.\n  useEffect(() => {\n    if (signature) {\n      const canvas = canvasRef.current\n      const context = canvas?.getContext('2d')\n      if (context) {\n        const img = new Image()\n        img.onload = () => {\n          context.drawImage(img, 0, 0)\n        }\n        img.src = signature\n      }\n    }\n  }, [])\n\n  const getCoordinates = (event: MouseEvent): Coordinate | void => {\n    if (!canvasRef.current) {\n      return\n    }\n\n    const canvas = canvasRef.current\n\n    const rect = canvas.getBoundingClientRect()\n    const scaleX = canvas.width / rect.width\n    const scaleY = canvas.height / rect.height\n\n    return {\n      x: (event.clientX - rect.left) * scaleX,\n      y: (event.clientY - rect.top) * scaleY\n    }\n  }\n\n  const drawLine = (\n    originalMousePosition: Coordinate,\n    newMousePosition: Coordinate\n  ) => {\n    if (!canvasRef.current || signature) {\n      return\n    }\n\n    const canvas = canvasRef.current\n    const context = canvas?.getContext('2d')\n\n    if (context) {\n      context.strokeStyle =\n        markerStyle?.strokeStyle || defaultProps.markerStyle.strokeStyle\n      context.lineJoin =\n        markerStyle?.lineJoin || defaultProps.markerStyle.lineJoin\n      context.lineWidth =\n        markerStyle?.lineWidth || defaultProps.markerStyle.lineWidth\n\n      context.beginPath()\n      context.moveTo(originalMousePosition.x, originalMousePosition.y)\n      context.lineTo(newMousePosition.x, newMousePosition.y)\n      context.closePath()\n      context.stroke()\n    }\n  }\n\n  const startPaint = useCallback((event) => {\n    const coordinates = getCoordinates(event)\n    if (coordinates) {\n      setMousePosition(coordinates)\n      setIsPainting(true)\n      setEmpty(false)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (!canvasRef.current || signature) {\n      return\n    }\n    const canvas = canvasRef.current\n    canvas.addEventListener('mousedown', startPaint)\n    return () => {\n      canvas.removeEventListener('mousedown', startPaint)\n    }\n  }, [startPaint, signature])\n\n  const paint = useCallback(\n    (event) => {\n      if (isPainting) {\n        const newMousePosition = getCoordinates(event)\n        if (mousePosition && newMousePosition) {\n          drawLine(mousePosition, newMousePosition)\n          setMousePosition(newMousePosition)\n        }\n      }\n    },\n    [isPainting, mousePosition] // eslint-disable-line\n  )\n\n  useEffect(() => {\n    if (!canvasRef.current || signature) {\n      return\n    }\n    const canvas = canvasRef.current\n    canvas.addEventListener('mousemove', paint)\n    return () => {\n      canvas.removeEventListener('mousemove', paint)\n    }\n  }, [paint, signature])\n\n  const exitPaint = useCallback(() => {\n    setIsPainting(false)\n    setMousePosition({ x: 0, y: 0 })\n  }, [])\n\n  useEffect(() => {\n    if (!canvasRef.current || signature) {\n      return\n    }\n    const canvas = canvasRef.current\n    canvas.addEventListener('mouseup', exitPaint)\n    canvas.addEventListener('mouseleave', exitPaint)\n    return () => {\n      canvas.removeEventListener('mouseup', exitPaint)\n      canvas.removeEventListener('mouseleave', exitPaint)\n    }\n  }, [exitPaint, signature])\n\n  const clearCanvas = () => {\n    setEmpty(true)\n    if (signature) {\n      setSignature('')\n    }\n    if (!canvasRef.current) {\n      return\n    }\n    const canvas = canvasRef.current\n    const context = canvas?.getContext('2d')\n    if (context) {\n      context.clearRect(0, 0, canvas.width, canvas.height)\n    }\n  }\n\n  const saveCanvas = () => {\n    if (!canvasRef.current || empty) {\n      return\n    }\n    const canvas = canvasRef.current\n    const context = canvas?.getContext('2d')\n    if (context) {\n      setSignature(\n        canvas\n          ?.toDataURL('image/png')\n          .replace('image/png', 'image/octet-stream')\n      )\n    }\n  }\n\n  return (\n    <div>\n      <div\n        style={{ ...defaultProps.canvasStyle, ...canvasStyle, width, height }}\n      >\n        <canvas\n          ref={canvasRef}\n          height={height || defaultProps.height}\n          width={width || defaultProps.width}\n        />\n      </div>\n      <button\n        style={\n          signature\n            ? { ...defaultProps.redrawButtonStyle, ...redrawButtonStyle }\n            : { ...defaultProps.clearButtonStyle, ...clearButtonStyle }\n        }\n        onClick={() => clearCanvas()}\n      >\n        {signature\n          ? redrawButtonText || defaultProps.redrawButtonText\n          : clearButtonText || defaultProps.clearButtonText}\n      </button>\n      {!signature && (\n        <button\n          style={{ ...defaultProps.saveButtonStyle, ...saveButtonStyle }}\n          onClick={() => saveCanvas()}\n        >\n          {saveButtonText || defaultProps.saveButtonText}\n        </button>\n      )}\n    </div>\n  )\n}\n","import React, {useState} from 'react'\n\nimport { SignatureForm } from 'react-signature-form'\n\nconst App = () => {\n  const [signature, setSignature] = useState('');\n\n  return (\n    <div className=\"container\">\n      <h1>React signature form</h1>\n      <p>A lightweight and customisable package to enable your <br /> users to set their autographs and save it to an image.</p>\n      <SignatureForm\n        signature={signature}\n        setSignature={setSignature}\n        width={400}\n        height={200}\n      />\n      <p>Made with ❤️ㅤby <a href=\"https://www.miyagami.com\" target=\"_blank\" rel=\"noreferrer\">Miyagami</a></p>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}